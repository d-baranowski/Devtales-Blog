buildscript {
    ext {
        springBootVersion = '1.5.4.RELEASE'
        codecov = "${System.getenv('CODECOV_TOKEN')}"
<<<<<<< HEAD
        codacyToken = "${System.getenv('CODACY_PROJECT_TOKEN')}"
=======
>>>>>>> 59f7cba... Fixed unresolved merge issue
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath ("com.moowork.gradle:gradle-node-plugin:1.1.1")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'com.moowork.node'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}


dependencies {
    //compile 'org.springframework.boot:spring-boot-starter-actuator'
    //compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    //compile 'org.liquibase:liquibase-core'
    //compile 'org.springframework.boot:spring-boot-starter-security'
    //compile 'org.springframework.session:spring-session'
    // compile 'org.springframework.boot:spring-boot-starter-websocket'

    compile 'org.springframework.boot:spring-boot-starter-freemarker'
    compile 'org.springframework.boot:spring-boot-starter-web'

    compile("org.springframework.boot:spring-boot-devtools")

    compileOnly 'org.projectlombok:lombok'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'net.sourceforge.htmlunit:htmlunit:2.26'
}

bootRun {
    addResources = true
}

jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}
check.dependsOn(jacocoTestReport)

task jsInstall(type: NpmTask) {
    workingDir file("$projectDir/src/main/js")
    args = ['install']
}

task jsBuild(type: NpmTask) {
    workingDir file("$projectDir/src/main/js")
    args = ['run','build']
}

jsBuild.dependsOn(jsInstall)
build.dependsOn(jsBuild)

task deployToCodeCov(type: Exec, dependsOn: 'jacocoTestReport') {
    executable "sh"
    args  './.codecov', '-t', "${codecov}"
}

task checkToken {
    print "${System.getenv('CODECOV_TOKEN')}"
}

bootRun.dependsOn(build)

