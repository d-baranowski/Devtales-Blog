buildscript {
    ext {
        springBootVersion = '1.5.4.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:1.1.1")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'com.moowork.node'

version = '0.0.2-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    //Possibly useful
    //compile 'org.springframework.boot:spring-boot-starter-actuator'
    //compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    //compile 'org.liquibase:liquibase-core'
    //compile 'org.springframework.session:spring-session'
    //compile 'org.springframework.boot:spring-boot-starter-websocket'

    //Base
    compile 'org.springframework.boot:spring-boot-starter-web'

    //Reflections
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.8.3'

    //Templating Engine
    compile 'org.springframework.boot:spring-boot-starter-freemarker'

    //Database
    compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'
    compile("org.springframework.boot:spring-boot-starter-data-jpa")

    //Security
    compile 'org.springframework.boot:spring-boot-starter-security'

    //Devtools
    compile 'org.springframework.boot:spring-boot-devtools'

    //Scaffolding
    compileOnly 'org.projectlombok:lombok'

    //Html Parser
    compile group: 'org.jsoup', name: 'jsoup', version: '1.10.3'

    //Create readable urls
    compile group: 'com.github.slugify', name: 'slugify', version: '2.1.9'

    //Utils
    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    compile group: 'org.bytedeco', name: 'javacv-platform', version: '1.3.3'

    //Testing
    testCompile 'nl.jqno.equalsverifier:equalsverifier:2.0.2'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.mockito:mockito-core:2.8.47'
    testCompile 'org.assertj:assertj-core:3.8.0'
    testCompile 'org.skyscreamer:jsonassert:1.5.0'


    //Database in test
    testCompile group: 'com.h2database', name: 'h2', version: '1.3.148'
    testRuntime group: 'com.h2database', name: 'h2', version: '1.3.148'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: '1.5.4.RELEASE'

    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.6.0'
    // For downloading browser-specific drivers that browsers like Chrome and IE require
    testCompile 'io.github.bonigarcia:webdrivermanager:2.1.0'
}

bootRun {
    addResources = true
}

jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}
check.dependsOn(jacocoTestReport)

task generateStaticFilesConfig {
    def names = []
    def sourceDir = new File('src/main/resources/static')
    def resultFile = new File('src/main/resources/static-files-list.txt')
    fileTree(dir: sourceDir).visit {
        FileVisitDetails details ->
            if (details.file.isFile()) {
                names << sourceDir.toURI().relativize(details.file.toURI())
            }
    }
    println names
    resultFile.write(names.toString())
}

task jsInstall(type: NpmTask) {
    workingDir file("$projectDir/src/main/js")
    args = ['install']
}

task jsFlowSetup(type: NpmTask) {
    workingDir file("$projectDir/src/main/js")
    args = ['run', 'preValidate']
}

task jsValidate(type: NpmTask) {
    workingDir file("$projectDir/src/main/js")
    args = ['run', 'validate']
}

task jsBuild(type: NpmTask) {
    workingDir file("$projectDir/src/main/js")
    args = ['run', 'build']
}

task jsTest(type: NpmTask) {
    workingDir file("$projectDir/src/main/js")
    args = ['run', 'test']
}

jsValidate.dependsOn(jsInstall)
jsBuild.dependsOn(jsValidate)
jsTest.dependsOn(jsBuild)
check.dependsOn(jsTest)
bootRepackage.dependsOn(jsBuild)