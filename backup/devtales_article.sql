-- MySQL dump 10.13  Distrib 8.0.13, for macos10.14 (x86_64)
--
-- Host: 127.0.0.1    Database: devtales
-- ------------------------------------------------------
-- Server version	8.0.13

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
 SET NAMES utf8 ;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `article`
--

DROP TABLE IF EXISTS `article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
 SET character_set_client = utf8mb4 ;
CREATE TABLE `article` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `created_on` datetime DEFAULT NULL,
  `html` longtext,
  `json_representation` longtext,
  `published_date` datetime DEFAULT NULL,
  `slug` varchar(500) NOT NULL,
  `summary` longtext,
  `title` varchar(500) DEFAULT NULL,
  `updated_on` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `UK_lc76j4bqg2jrk06np18eve5yj` (`slug`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `article`
--

LOCK TABLES `article` WRITE;
/*!40000 ALTER TABLE `article` DISABLE KEYS */;
INSERT INTO `article` VALUES (1,'2018-02-07 01:44:25','<html>\n <head></head>\n <body>\n  <div class=\"notranslate public-DraftEditor-content\" style=\"outline: none; user-select: text; white-space: pre-wrap; word-wrap: break-word;\">\n   <div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>S</span></span>\n      <span style=\"font-weight: bold;\"><span>ince I was a kid I loved playing with building blocks</span></span>\n     </div></h1>\n    <div class=\"summary\">\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Since I was a kid I loved playing with building blocks and I found that programming is </span></span>\n      <span style=\"font-weight: bold;\"><span>just like playing with building blocks.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>The </span></span>\n      <span style=\"font-weight: bold;\"><span>only</span></span>\n      <span><span> difference is that you </span></span>\n      <span style=\"font-weight: bold;\"><span>can\'t see</span></span>\n      <span><span> the building blocks and all you get is a description of building blocks but the description is often </span></span>\n      <span style=\"font-weight: bold;\"><span>wrong</span></span>\n      <span><span> and there is </span></span>\n      <span style=\"font-weight: bold;\"><span>money</span></span>\n      <span><span> involved and the client tells you </span></span>\n      <span style=\"font-weight: bold;\"><span>what they want</span></span>\n      <span><span> but you don\'t fully understand what they are saying and what they think they want is rarely </span></span>\n      <span style=\"font-weight: bold;\"><span>what they need</span></span>\n      <span><span> and there are other </span></span>\n      <span style=\"font-weight: bold;\"><span>people </span></span>\n      <span><span>playing with you as well and you have to work together to satisfy the client but they don\'t always play nicely and they speak different a language figuratively and or literally and </span></span>\n      <span style=\"font-weight: bold;\"><span>communicating </span></span>\n      <span><span>with them is like Chinese whispers and you need to get it right because if you get it wrong people will get angry and will lose </span></span>\n      <span style=\"font-weight: bold;\"><span>money </span></span>\n      <span><span>or they could even </span></span>\n      <span style=\"font-weight: bold;\"><span>die</span></span>\n      <span><span> and the </span></span>\n      <span style=\"font-weight: bold;\"><span>clock is ticking</span></span>\n      <span><span> and the floor is lava and there is an earthquake.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <img class=\"media\">\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>But other than that it\'s just like playing with building blocks, and </span></span>\n      <span style=\"font-weight: bold;\"><span>I love building blocks.</span></span>\n     </div>\n    </div>\n   </div>\n  </div>\n </body>\n</html>','{\"entityMap\":{\"0\":{\"type\":\"image\",\"mutability\":\"IMMUTABLE\",\"data\":{\"src\":\"/blog-content/f3e122b1-508a-49b4-bae5-c346875e5db9.jpg\"}}},\"blocks\":[{\"key\":\"4vpiu\",\"text\":\"Since I was a kid I loved playing with building blocks\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":1,\"length\":53,\"style\":\"BOLD\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"7f62r\",\"text\":\"Since I was a kid I loved playing with building blocks and I found that programming is just like playing with building blocks.\",\"type\":\"summary\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":87,\"length\":39,\"style\":\"BOLD\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"b2p33\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"8232h\",\"text\":\"The only difference is that you can\'t see the building blocks and all you get is a description of building blocks but the description is often wrong and there is money involved and the client tells you what they want but you don\'t fully understand what they are saying and what they think they want is rarely what they need and there are other people playing with you as well and you have to work together to satisfy the client but they don\'t always play nicely and they speak different a language figuratively and or literally and communicating with them is like Chinese whispers and you need to get it right because if you get it wrong people will get angry and will lose money or they could even die and the clock is ticking and the floor is lava and there is an earthquake.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":4,\"length\":4,\"style\":\"BOLD\"},{\"offset\":32,\"length\":9,\"style\":\"BOLD\"},{\"offset\":143,\"length\":5,\"style\":\"BOLD\"},{\"offset\":162,\"length\":5,\"style\":\"BOLD\"},{\"offset\":202,\"length\":14,\"style\":\"BOLD\"},{\"offset\":309,\"length\":14,\"style\":\"BOLD\"},{\"offset\":344,\"length\":7,\"style\":\"BOLD\"},{\"offset\":532,\"length\":14,\"style\":\"BOLD\"},{\"offset\":674,\"length\":6,\"style\":\"BOLD\"},{\"offset\":699,\"length\":3,\"style\":\"BOLD\"},{\"offset\":711,\"length\":16,\"style\":\"BOLD\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"dho6k\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"dq4th\",\"text\":\" \",\"type\":\"atomic\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":1,\"key\":0}],\"data\":{}},{\"key\":\"4unc8\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"anedj\",\"text\":\"But other than that it\'s just like playing with building blocks, and I love building blocks.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":69,\"length\":23,\"style\":\"BOLD\"}],\"entityRanges\":[],\"data\":{}}]}','2018-02-07 02:11:48','since-i-was-a-kid-i-loved-playing-with-building-blocks','<div class=\"summary\">\n <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n  <span><span>Since I was a kid I loved playing with building blocks and I found that programming is </span></span>\n  <span style=\"font-weight: bold;\"><span>just like playing with building blocks.</span></span>\n </div>\n</div><br>','Since I was a kid I loved playing with building blocks','2018-02-07 20:31:23'),(2,'2018-02-07 19:51:15','<html>\n <head></head>\n <body>\n  <div class=\"notranslate public-DraftEditor-content\" style=\"outline: none; user-select: text; white-space: pre-wrap; word-wrap: break-word;\">\n   <div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span style=\"font-weight: bold;\"><span>Its more than a name</span></span>\n     </div></h1>\n    <div class=\"summary\">\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>It has been 10 hours since my blog went \'live\' and there are already issues. Turns out that setting up your domain correctly is crucial for a website. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span> As of now 19:00 (07/02/2018) the website causes a problem with certificate when its accessed from mobile devices. Furthermore the website is inaccessible from some computers due to issues with DNS. I took following steps to resolve the problem:</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span> First I visited to get more information about the issue: https://intodns.com/devtales.net </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>It turned out that I had an error in my NS record. I have mistakenly set them to the IP address of my server. Instead they should point to the domain name of my name server which is in this case AWS. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>After fixing the NS record I used this (https://www.ghostforbeginners.com/how-to-proxy-port-80-to-2368-for-ghost-with-nginx/) article to setup nginx as a simple redirect from http to https. </span></span>\n     </div>\n    </div>\n   </div>\n  </div>\n </body>\n</html>','{\"entityMap\":{},\"blocks\":[{\"key\":\"foqbj\",\"text\":\"Its more than a name\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":0,\"length\":20,\"style\":\"BOLD\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"cpmcd\",\"text\":\"It has been 10 hours since my blog went \'live\' and there are already issues. Turns out that setting up your domain correctly is crucial for a website. \",\"type\":\"summary\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"8lo41\",\"text\":\"\\nAs of now 19:00 (07/02/2018) the website causes a problem with certificate when its accessed from mobile devices. Furthermore the website is inaccessible from some computers due to issues with DNS. I took following steps to resolve the problem:\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"knel\",\"text\":\"\\nFirst I visited to get more information about the issue: https://intodns.com/devtales.net \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ft975\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"1cue6\",\"text\":\"It turned out that I had an error in my NS record. I have mistakenly set them to the IP address of my server. Instead they should point to  the domain name of my name server which is in this case AWS. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"26i0v\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"91io8\",\"text\":\"After fixing the NS record I used this (https://www.ghostforbeginners.com/how-to-proxy-port-80-to-2368-for-ghost-with-nginx/) article to setup nginx as a simple redirect from http to https.  \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}]}',NULL,'its-more-than-a-name','<div class=\"summary\">\n <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n  <span><span>It has been 10 hours since my blog went \'live\' and there are already issues. Turns out that setting up your domain correctly is crucial for a website. </span></span>\n </div>\n</div><br>','Its more than a name','2018-02-07 22:39:12'),(3,'2018-02-09 22:10:12','<html>\n <head></head>\n <body>\n  <div class=\"notranslate public-DraftEditor-content\" style=\"outline: none; user-select: text; white-space: pre-wrap; word-wrap: break-word;\">\n   <div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Why I started to love web development</span></span>\n     </div></h1>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>The message I\'m trying to get across: \"There is fun to be had in web development. Give it a try!\"</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>I started my placement with a conviction that I don\'t want to have anything to do with web development. Back then all my experience with web development was a short introductory module at university. It was horrible. I had no idea about what I\'m doing. Everything I had to do with Javascript and CSS was a struggle. I remember the frustration caused by spending hours trying to align that navbar correctly, just to learn that it looks wrong on IE. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Despite my previous convictions, my first project was working on a website for EasyJet.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>After working both on the backend and the frontend I find that there is fun to be had on both ends.</span></span>\n     </div>\n    </div>\n   </div>\n  </div>\n </body>\n</html>','{\"entityMap\":{},\"blocks\":[{\"key\":\"1gojg\",\"text\":\"Why I started to love web development\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"af5o7\",\"text\":\"The message I\'m trying to get across: \\\"There is fun to be had in web development. Give it a try!\\\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"8tisu\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"b8lnn\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"cmuj0\",\"text\":\"I started my placement with a conviction that I don\'t want to have anything to do with web development. Back then all my experience with web development was a short introductory module at university. It was horrible. I had no idea about what I\'m doing. Everything I had to do with Javascript and CSS was a struggle. I remember the frustration caused by spending hours trying to align that navbar correctly, just to learn that it looks wrong on IE. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"e3heq\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"c6va9\",\"text\":\"Despite my previous convictions, my first project was working on a website for EasyJet.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"f72ue\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"8dm9g\",\"text\":\"After working both on the backend and the frontend I find that there is fun to be had on both ends.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}]}',NULL,'why-i-started-to-love-web-development','','Why I started to love web development','2018-02-09 23:38:44'),(4,'2018-02-12 21:52:16','<html>\n <head></head>\n <body>\n  <div class=\"notranslate public-DraftEditor-content\" style=\"outline: none; user-select: text; white-space: pre-wrap; word-wrap: break-word;\">\n   <div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>How not to start a blog</span></span>\n     </div></h1>\n    <div class=\"summary\">\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>As a young and passionate software developer I have a tendency to try to solve </span></span>\n      <span style=\"font-weight: bold;\"><span>EVERY </span></span>\n      <span><span>problem through writing a piece of code. When I decided to start a blog writing my own solution was only natural. </span></span>\n     </div>\n    </div>\n    <div class=\"summary\">\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Invent problems</span></span>\n     </div></h1>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Software developers love solving problems, and when there are no problems to solve we love inventing our own. I stay reasonable when working on real projects, so I decided to let go when working on the blog in my spare time. Following this \'logic\', when I was faced with a challenge of writing a blog with 99% of static content React was an obvious choice. I did consider using server side rendered templates using Thymeleaf or other similar technologies, but that would be boring and no one likes boring projects. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Since I was using React I really needed to make it a polymorphic application. SEO is a big factor for a Blog and rendering my JS sites on the server will help to make my website easier to crawl. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>I could render my react component server side on Node Express, but I already did that on one of my previous projects. There is an amazing alternative in Java 8 called Nashorn. It lets me render my react components on the JVM! What could possibly go wrong? </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Next thing to add to my tech stack is a tool which will make contacting the Database easier. I could use an off the shelf ORM like Hibernate. That however has performance cost! I can\'t afford to risk that on my blog! Another option would be to write my SQL by hand. This approach will lead to code that is difficult to maintain, as it violates the DRY principle. Writing my own reflections based SQL generator was the only \'reasonable\' option at this stage.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Live with them</span></span>\n     </div></h1>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>After picking the most interesting tech stack I could think of, and setting myself some ambitious requirements I started to write my blog. As I was adding code I was growing more eager to write blog posts. At first It was great! I was learning new things and discovering interesting solutions to various problems. I did a simple POC for my home made ORM and it worked out great. The first couple simple pages I wrote in react were rendering on Nashorn without many issues. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>After a while my initial excitement with the new technologies slowly gave way to frustration.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>The polymorphic react application was introducing new complexity to the project. I didn\'t only have to write code that will work when rendered on the server, but I also had to make the same code provide the same functionality when ran solely on the client. As requirements grew more complicated, so did my ORM code. I found that I was spending more time writing my ORM implementation than I was on actual implementation code for the blog. When It comes to Nashorn, it turned out to be worryingly slow and impossible to debug. With all of these issues I was forced to push the release date further and further away. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>I ended up having to cut many features out of the scope of the project and focus solely on the MVP. I listened to the silent voice of reason and used the JPA instead of my own ORM implementation to save time. Nashorn is still causing more problems than it solves.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Conclusion</span></span>\n     </div></h1>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>From developer\'s perspective I loved being able to learn new things and sharpening my technical skills. From the Client\'s perspective I was frustrated at how long it took to complete. Even after such a long time, there are still many features and improvements that need to be done in order to make this website fully functional. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>I only invested my own time into this project, but it let me empathise with people who also invest their money into software.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>When you find yourself bringing new technologies into projects you work on always remember that every new technology has </span></span>\n      <span style=\"font-weight: bold;\"><span>costs </span></span>\n      <span><span>associated with it. It brings complexity and requires everyone on the team to learn something. Make sure to asses if it will solve more problems than it will cause. It could be that you are trying to shoot a flea with a shotgun.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n   </div>\n  </div>\n </body>\n</html>','{\"entityMap\":{},\"blocks\":[{\"key\":\"2rned\",\"text\":\"How not to start a blog\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"4muj8\",\"text\":\"As a young and passionate software developer I have a tendency to try to solve EVERY problem through writing a piece of code. When I decided to start a blog writing my own solution was only natural. \",\"type\":\"summary\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":79,\"length\":6,\"style\":\"BOLD\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"a2h2g\",\"text\":\"\",\"type\":\"summary\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"5r0sm\",\"text\":\"Invent problems\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"2f2i0\",\"text\":\"Software developers love solving problems, and when there are no problems to solve we love inventing our own. I stay reasonable when working on real projects, so I decided to let go when working on the blog in my spare time. Following this \'logic\', when I was faced with a challenge of writing a blog with 99% of static content React was an obvious choice. I did consider using server side rendered templates using Thymeleaf or other similar technologies, but that would be boring and no one likes boring projects. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"e6crg\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"62q8u\",\"text\":\"Since I was using React I really needed to make it a polymorphic application. SEO is a big factor for a Blog and rendering my JS sites on the server will help to make my website easier to crawl. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"f7n92\",\"text\":\"I could render my react component server side on Node Express, but I already did that on one of my previous projects. There is an amazing alternative in Java 8 called Nashorn. It lets me render my react components on the JVM! What could possibly go wrong? \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"4l0li\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"e5nkd\",\"text\":\"Next thing to add to my tech stack is a tool which will make contacting the Database easier. I could use an off the shelf ORM like Hibernate. That however  has performance cost! I can\'t afford to risk that on my blog! Another option would be to write my SQL by hand. This approach will lead to code that is difficult to maintain, as it violates the DRY principle. Writing my own reflections based SQL generator was the only \'reasonable\' option at this stage.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"2817l\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"9rp3r\",\"text\":\"Live with them\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"bovsg\",\"text\":\"After picking the most interesting tech stack I could think of, and setting myself some ambitious requirements I started to write my blog. As I was adding code I was growing more eager to write blog posts. At first It was great! I was learning new things and discovering interesting solutions to various problems. I did a simple POC for my home made ORM and it worked out great. The first couple simple pages I wrote in react were rendering on Nashorn without many issues. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"d0fm4\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"enh2l\",\"text\":\"After a while my initial excitement with the new technologies slowly gave way to frustration.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ejc4l\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"6cgi0\",\"text\":\"The polymorphic react application was introducing new complexity to the project. I didn\'t only have to write code that will work when rendered on the server, but I also had to make the same code provide the same functionality when ran solely on the client. As requirements grew more complicated, so did my ORM code. I found that I was spending more time writing my ORM implementation than I was on actual implementation code for the blog. When It comes to Nashorn, it turned out to be worryingly slow and impossible to debug. With all of these issues I was forced to push the release date further and further away. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"u88j\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ac208\",\"text\":\"I ended up having to cut many features out of the scope of the project and focus solely on the MVP. I listened to the silent voice of reason and used the JPA instead of my own ORM implementation to save time. Nashorn is still causing more problems than it solves.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"1o7eu\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"272dk\",\"text\":\"Conclusion\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ke86\",\"text\":\"From developer\'s perspective I loved being able to learn new things and sharpening my technical skills. From the Client\'s perspective I was frustrated at how long it took to complete. Even after such a long time, there are still many features and improvements that need to be done in order to make this website fully functional. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"5d7u0\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"fiimh\",\"text\":\"I only invested my own time into this project, but it let me empathise with people who also invest their money into software.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"9fmqp\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"bcjns\",\"text\":\"When you find yourself bringing new technologies into projects you work on always remember that every new technology has costs associated with it. It brings complexity and requires everyone on the team to learn something. Make sure to asses if it will solve more problems than it will cause. It could be that you are trying to shoot a flea with a shotgun.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":121,\"length\":6,\"style\":\"BOLD\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"6kkct\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"eqd53\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"81aqv\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}]}','2018-02-12 23:54:03','how-not-to-start-a-blog','<div class=\"summary\">\n <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n  <span><span>As a young and passionate software developer I have a tendency to try to solve </span></span>\n  <span style=\"font-weight: bold;\"><span>EVERY </span></span>\n  <span><span>problem through writing a piece of code. When I decided to start a blog writing my own solution was only natural. </span></span>\n </div>\n</div><br><div class=\"summary\">\n <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n  <span><br></span>\n </div>\n</div><br>','How not to start a blog','2018-02-12 23:53:55'),(5,'2018-02-22 21:16:05','<html>\n <head></head>\n <body>\n  <div class=\"notranslate public-DraftEditor-content\" style=\"outline: none; user-select: text; white-space: pre-wrap; word-wrap: break-word;\">\n   <div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Effective Jackson with annotations in Spring Boot</span></span>\n     </div></h1>\n    <div class=\"summary\">\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>With the current craze about micro-services I spend a considerable amount of time dealing with Rest API\'s. They mostly send and receive data in JSON format. That is where Jackson comes in handy. In this article I\'ll show some code examples of some non trivial use cases of Jackson I came across.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span style=\"font-weight: bold;\"><span>Technology Versions:</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Java 8</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Spring Boot: 1.5.7.Release</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Jackson: 2.8.10</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Lombo: I use lombok annotations check out their website if the code confuses you: https://projectlombok.org/features/all Thank me later ;)</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>I prefer using annotations instead of custom deserializers and manual json building because it reduces the amount of code I need write which in turn makes my code easier to maintain and reduces the room for errors. </span></span>\n     </div>\n    </div>\n    <h2>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Changing property name between serializing and deserializing</span></span>\n     </div></h2>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>In API to API communication sometimes the Json I receive has errors or doesn\'t exactly match the output I need I can customise how properties of my Model are deserialized and serialized. This allows me to map Json objects in a single model without the need to create two separate models and mapping the manually. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <pre class=\"language-\"><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// java //</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>//</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// In this example we change how object is serialized and deserialized using only </span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// annotations. Use of WRITE_ONLY allows to specify that this annotation only</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// applies when deserializing from json. Using an annotation on a getter</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// also signifies that it only applies when serializing.</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>import com</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>fasterxml</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>jackson</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>annotation</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>JsonIgnoreProperties</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>import com</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>fasterxml</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>jackson</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>annotation</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>JsonProperty</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>import lombok</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>AllArgsConstructor</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>import lombok</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>Builder</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>import lombok</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>EqualsAndHashCode</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>import lombok</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>Getter</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>import lombok</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>NoArgsConstructor</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>@</span></span></span>\n        <span class=\"token function\"><span><span>Builder</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>@</span></span></span>\n        <span class=\"token function\"><span><span>Getter</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>@</span></span></span>\n        <span class=\"token function\"><span><span>EqualsAndHashCode</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>@</span></span></span>\n        <span class=\"token function\"><span><span>JsonIgnoreProperties</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>ignoreUnknown </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token boolean\"><span><span>true</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>@</span></span></span>\n        <span class=\"token function\"><span><span>AllArgsConstructor</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>@</span></span></span>\n        <span class=\"token function\"><span><span>NoArgsConstructor</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>public class </span></span></span>\n        <span class=\"token class-name\"><span><span>DeserializeSerializeDifferently</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> private Integer channelID</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token comment\"><span><span>//Deserialize from json as \'code\'</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> @</span></span></span>\n        <span class=\"token function\"><span><span>JsonProperty</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>access </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> JsonProperty</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>Access</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span style=\"font-style: italic;\"><span>WRITE_ONLY</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> private String code</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token comment\"><span><span>//Deserialize from json as \'shortName\'</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> @</span></span></span>\n        <span class=\"token function\"><span><span>JsonProperty</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>access </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> JsonProperty</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>Access</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span style=\"font-style: italic;\"><span>WRITE_ONLY</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> private String shortName</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> private Integer bitValue</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token comment\"><span><span>//Serialize to json as \'name\'</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> @</span></span></span>\n        <span class=\"token function\"><span><span>JsonProperty</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>value </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token string\"><span><span>\"name\"</span></span></span>\n        <span class=\"token punctuation\"><span><span>,</span></span></span>\n        <span class=\"token \"><span><span> access </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> JsonProperty</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>Access</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span style=\"font-style: italic;\"><span>READ_ONLY</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> public String </span></span></span>\n        <span class=\"token function\"><span><span>getName</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token keyword\"><span><span>return</span></span></span>\n        <span class=\"token \"><span><span> this</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>shortName</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token comment\"><span><span>//Serialize to json as \'value\'</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> @</span></span></span>\n        <span class=\"token function\"><span><span>JsonProperty</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>value </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token string\"><span><span>\"value\"</span></span></span>\n        <span class=\"token punctuation\"><span><span>,</span></span></span>\n        <span class=\"token \"><span><span> access </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> JsonProperty</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>Access</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span style=\"font-style: italic;\"><span>READ_ONLY</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> public String </span></span></span>\n        <span class=\"token function\"><span><span>getValue</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token keyword\"><span><span>return</span></span></span>\n        <span class=\"token \"><span><span> this</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>code</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre></pre>\n    </div>\n    <h2>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Easy Dates parsing and formatting</span></span>\n     </div></h2>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>On many occasions the date format between the API talking to each other isn\'t matching. Jackson can help you abstract away the pain of having to parse the dates manually. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <pre class=\"language-\"><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// java //</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>//</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// Sometimes you need to map your dates into different formats.</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// This setup allows doing this without any additional setup.</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>@</span></span></span>\n        <span class=\"token function\"><span><span>Builder</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>@</span></span></span>\n        <span class=\"token function\"><span><span>EqualsAndHashCode</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>@</span></span></span>\n        <span class=\"token function\"><span><span>JsonIgnoreProperties</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>ignoreUnknown </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token boolean\"><span><span>true</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>@</span></span></span>\n        <span class=\"token function\"><span><span>AllArgsConstructor</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>@</span></span></span>\n        <span class=\"token function\"><span><span>NoArgsConstructor</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>public class </span></span></span>\n        <span class=\"token class-name\"><span><span>ParseDate</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> private static final SimpleDateFormat </span></span><span style=\"font-style: italic;\"><span>DESERIALIZE_PARSER </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token keyword\"><span><span>new</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token class-name\"><span><span>SimpleDateFormat</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token string\"><span><span>\"EEE MMM d HH:mm:ss zzz yyyy\"</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> private static final SimpleDateFormat </span></span><span style=\"font-style: italic;\"><span>SERIALIZE_FORMATTER </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token keyword\"><span><span>new</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token class-name\"><span><span>SimpleDateFormat</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token string\"><span><span>\"yyyy-MM-dd\"</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token comment\"><span><span>// Disable default parser</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> @</span></span></span>\n        <span class=\"token function\"><span><span>JsonIgnore</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> private Date date</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token comment\"><span><span>// Create custom deserializer</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> @</span></span></span>\n        <span class=\"token function\"><span><span>JsonProperty</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>access </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> JsonProperty</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>Access</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span style=\"font-style: italic;\"><span>WRITE_ONLY</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> public void </span></span></span>\n        <span class=\"token function\"><span><span>setDate</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>String date</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> throws ParseException </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> this</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>date </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> </span></span><span style=\"font-style: italic;\"><span>DESERIALIZE_PARSER</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>parse</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>date</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token comment\"><span><span>// Disable default serializer</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> @JsonIgnore</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> public Date </span></span></span>\n        <span class=\"token function\"><span><span>getDate</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token keyword\"><span><span>return</span></span></span>\n        <span class=\"token \"><span><span> this</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>date</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token comment\"><span><span>// Create custom serializer </span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> @</span></span></span>\n        <span class=\"token function\"><span><span>JsonProperty</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>value </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token string\"><span><span>\"date\"</span></span></span>\n        <span class=\"token punctuation\"><span><span>,</span></span></span>\n        <span class=\"token \"><span><span> access </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> JsonProperty</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>Access</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span style=\"font-style: italic;\"><span>READ_ONLY</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> public String </span></span></span>\n        <span class=\"token function\"><span><span>getAsStringDate</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token keyword\"><span><span>return</span></span></span>\n        <span class=\"token \"><span><span> </span></span><span style=\"font-style: italic;\"><span>SERIALIZE_FORMATTER</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>format</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>this</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>date</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre></pre>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>I hope you find these examples useful. For the full code with tests check out: https://github.com/d-baranowski/jackson-tricks</span></span>\n     </div>\n    </div>\n   </div>\n  </div>\n </body>\n</html>','{\"entityMap\":{},\"blocks\":[{\"key\":\"fm8et\",\"text\":\"Effective Jackson with annotations in Spring Boot\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"9kak0\",\"text\":\"With the current craze about micro-services I spend a considerable amount of time dealing with Rest API\'s. They mostly send and receive data in JSON format. That is where Jackson comes in handy. In this article I\'ll show some code examples of some non trivial use cases of Jackson I came across.\",\"type\":\"summary\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"a80tn\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"cv5o0\",\"text\":\"Technology Versions:\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":0,\"length\":20,\"style\":\"BOLD\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"dvkl7\",\"text\":\"Java 8\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"c1cem\",\"text\":\"Spring Boot: 1.5.7.Release\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"bc18d\",\"text\":\"Jackson: 2.8.10\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"1od7m\",\"text\":\"Lombo: I use lombok annotations check out their website if the code confuses you: https://projectlombok.org/features/all  Thank me later ;)\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"an38r\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"95pqk\",\"text\":\"I prefer using annotations instead of custom deserializers and manual json building because it reduces the amount of code I need  write which in turn makes my code easier to maintain and reduces the room for errors. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"6e0p0\",\"text\":\"Changing property name between serializing and deserializing\",\"type\":\"header-two\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"abl1i\",\"text\":\"In API to API communication sometimes the Json I receive has errors or doesn\'t exactly match the output I need I can customise how properties of my Model are deserialized and serialized. This allows me to map Json objects in a single model without the need to create two separate models and mapping the manually. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"etec2\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"e7ceg\",\"text\":\"// java //\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"9hnfa\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"av094\",\"text\":\"//\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"1qujj\",\"text\":\"// In this example we change how object is serialized and deserialized using only  \",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"a8032\",\"text\":\"// annotations. Use of WRITE_ONLY allows to specify that this annotation only\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"2iadi\",\"text\":\"// applies when deserializing from json. Using an annotation on a getter\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"6elsi\",\"text\":\"// also signifies that it only applies when serializing.\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ceeoc\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ab9t1\",\"text\":\"import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"h1uu\",\"text\":\"import com.fasterxml.jackson.annotation.JsonProperty;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"4elde\",\"text\":\"import lombok.AllArgsConstructor;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"r68j\",\"text\":\"import lombok.Builder;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"bg9i5\",\"text\":\"import lombok.EqualsAndHashCode;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"9f584\",\"text\":\"import lombok.Getter;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"fbgfv\",\"text\":\"import lombok.NoArgsConstructor;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"37aov\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ds6n3\",\"text\":\"@Builder()\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"31cmm\",\"text\":\"@Getter()\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ld8j\",\"text\":\"@EqualsAndHashCode()\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"apns3\",\"text\":\"@JsonIgnoreProperties(ignoreUnknown = true)\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ceeuf\",\"text\":\"@AllArgsConstructor()\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"clu4t\",\"text\":\"@NoArgsConstructor()\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"1kg47\",\"text\":\"public class DeserializeSerializeDifferently {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"81d92\",\"text\":\"   private Integer channelID;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"3nq4d\",\"text\":\"   \",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"csphv\",\"text\":\"   //Deserialize from json as \'code\'\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ak1nb\",\"text\":\"   @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":46,\"length\":10,\"style\":\"ITALIC\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"f4khu\",\"text\":\"   private String code;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"c3bjf\",\"text\":\"   \",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"9nr3k\",\"text\":\"   //Deserialize from json as \'shortName\'\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"8qdsr\",\"text\":\"   @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":46,\"length\":10,\"style\":\"ITALIC\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"1f3q0\",\"text\":\"   private String shortName;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"b1r1h\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"db8c4\",\"text\":\"   private Integer bitValue;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"1oq0r\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"3q6mo\",\"text\":\"   //Serialize to json as \'name\'\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"5kqr8\",\"text\":\"   @JsonProperty(value = \\\"name\\\", access = JsonProperty.Access.READ_ONLY)\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":62,\"length\":9,\"style\":\"ITALIC\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"a30ld\",\"text\":\"   public String getName() {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"240m9\",\"text\":\"      return this.shortName;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"5frp9\",\"text\":\"   }\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"b4084\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"2ep3g\",\"text\":\"   //Serialize to json as \'value\'\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"il38\",\"text\":\"   @JsonProperty(value = \\\"value\\\", access = JsonProperty.Access.READ_ONLY)\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":63,\"length\":9,\"style\":\"ITALIC\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"9fh1e\",\"text\":\"   public String getValue() {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"4r7c2\",\"text\":\"      return this.code;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"brnsr\",\"text\":\"   }\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"3df63\",\"text\":\"}\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"8i28s\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"7onam\",\"text\":\"Easy Dates parsing and formatting\",\"type\":\"header-two\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"bvmp1\",\"text\":\"On many occasions the date format between the API talking to each other isn\'t matching. Jackson can help you abstract away the pain of having to parse the dates manually. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"4eluq\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"e75e\",\"text\":\"// java //\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"aaj3u\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ev5g0\",\"text\":\"//\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ais6t\",\"text\":\"// Sometimes you need to map your dates into different formats.\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"doo82\",\"text\":\"// This setup allows doing this without any additional setup.\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"birqh\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"92e3f\",\"text\":\"@Builder()\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"3celq\",\"text\":\"@EqualsAndHashCode()\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"1ilv1\",\"text\":\"@JsonIgnoreProperties(ignoreUnknown = true)\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"bg9rv\",\"text\":\"@AllArgsConstructor()\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"21fkt\",\"text\":\"@NoArgsConstructor()\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"bf31b\",\"text\":\"public class ParseDate {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"dc7d\",\"text\":\"   private static final SimpleDateFormat DESERIALIZE_PARSER =\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":41,\"length\":19,\"style\":\"ITALIC\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"90rnc\",\"text\":\"      new SimpleDateFormat(\\\"EEE MMM d HH:mm:ss zzz yyyy\\\");\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"dc4r4\",\"text\":\"   private static final SimpleDateFormat SERIALIZE_FORMATTER =\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":41,\"length\":20,\"style\":\"ITALIC\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"11gb4\",\"text\":\"      new SimpleDateFormat(\\\"yyyy-MM-dd\\\");\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"fdli8\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"bkcu5\",\"text\":\"   // Disable default parser\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"fldcl\",\"text\":\"   @JsonIgnore()\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"f5qej\",\"text\":\"   private Date date;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"c4nlh\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"anr07\",\"text\":\"   // Create custom deserializer\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"3pbqc\",\"text\":\"   @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":46,\"length\":10,\"style\":\"ITALIC\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"eucqb\",\"text\":\"   public void setDate(String date) throws ParseException {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"4jsq6\",\"text\":\"      this.date =  DESERIALIZE_PARSER.parse(date);\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":19,\"length\":18,\"style\":\"ITALIC\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"c909t\",\"text\":\"   }\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"50q9\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"fdbvp\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"asiu4\",\"text\":\"   // Disable default serializer\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"4mok\",\"text\":\"   @JsonIgnore\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"66vg\",\"text\":\"   public Date getDate() {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"dqmhe\",\"text\":\"      return this.date;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"dd0am\",\"text\":\"   }\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"83chd\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"efdc4\",\"text\":\"   // Create custom serializer \",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"2vtj8\",\"text\":\"   @JsonProperty(value = \\\"date\\\", access = JsonProperty.Access.READ_ONLY)\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":62,\"length\":9,\"style\":\"ITALIC\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"3irk2\",\"text\":\"   public String getAsStringDate() {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"vqb1\",\"text\":\"      return SERIALIZE_FORMATTER.format(this.date);\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":13,\"length\":19,\"style\":\"ITALIC\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"uljg\",\"text\":\"   }\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"dfj4j\",\"text\":\"}\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"amt96\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"etqha\",\"text\":\"I hope you find these examples useful. For the full code with tests check out: https://github.com/d-baranowski/jackson-tricks\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}]}','2018-02-26 23:04:10','effective-jackson-with-annotations-in-spring-boot','<div class=\"summary\">\n <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n  <span><span>With the current craze about micro-services I spend a considerable amount of time dealing with Rest API\'s. They mostly send and receive data in JSON format. That is where Jackson comes in handy. In this article I\'ll show some code examples of some non trivial use cases of Jackson I came across.</span></span>\n </div>\n</div><br>','Effective Jackson with annotations in Spring Boot','2018-03-22 22:31:52'),(6,'2018-03-09 23:26:35','<html>\n <head></head>\n <body>\n  <div class=\"notranslate public-DraftEditor-content\" style=\"outline: none; user-select: text; white-space: pre-wrap; word-wrap: break-word;\">\n   <div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Git rebase is like fire</span></span>\n     </div></h1>\n    <div class=\"summary\">\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Git rebase is like fire. In inexperienced hands in can do a lot of harm, but if its handled with care it will make your life much better. Let it help you make your projects easier to maintain. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <img class=\"media\">\n    </div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Scary ghost stories</span></span>\n     </div></h1>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>When I first started using git I was told never to use </span></span>\n      <span style=\"font-family: monospace; word-wrap: break-word;\"><span>git rebase</span></span>\n      <span><span> because it is </span></span>\n      <span style=\"font-weight: bold;\"><span>dangerous</span></span>\n      <span><span>. After gaining experience using git someone else told me to use it. At first I tough it was blasphemy even to mention this command. However after giving it a try I could no longer live without it. It lets me keep my commit history clean and therefore much more useful. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>The </span></span>\n      <span style=\"font-weight: bold;\"><span>danger</span></span>\n      <span><span> that everyone talks about is the fact that this command rewrites history and generates new git commit tags for rebased commits. This means that if you are working on the same branch as someone else </span></span>\n      <span style=\"font-weight: bold;\"><span>you should not rebase</span></span>\n      <span><span> it because it will make it really hard to resolve git conflicts. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Imagine you have the same commit duplicated locally on your machine and your coworkers machine. If you rebase and try to merge your changes with your co-worker\'s, git has no way of identifying that your version of commit is the same as your friend\'s version. Its id has been changed. Keep this in mind when you use rebase. You should use it on personal feature branches, but if you need to do this on a shared branch make sure that everyone is aware that you plan to do this and that everyone\'s changes are securely merged before proceeding. This means that rebasing master is almost never a good idea. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>A good commit</span></span>\n     </div></h1>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>A good commit history is invaluable for maintainability of a project. It will aid you when you come back to a project that you haven\'t worked on in a long time or a project that you have never seen before. Having a good commit history will allow you to understand the context in which the code has been written. That in turn will help you to understand the problems that developers have been faced with in the past and justify the design decisions they made as well as the assumptions they had. Read this: https://chris.beams.io/posts/git-commit/ for an amazing summary of how to write a good commit message.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span> Think about the times where you had to change the code written by someone who has already left the company. You could not ask them why did they do something the way they have done it or what were the requirements they were working towards. Now imagine that you can summon their git ghost that will tell you all the information you want to know and let you replay their thought process commit by commit. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Dirty commit history is technical debt</span></span>\n     </div></h1>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Unfortunately as we write the code we don\'t always have the time to spend to write good commit messages. When we are in debugging and tweaking mode we don\'t want to focus on elaborate git commits. Don\'t worry. You can have the cake and eat it! If you remember to rebase your feature branches before merging them you will have a great occasion to clean up the mess you have left before and arrange it into a clean and easy to follow list of good commits. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>What is git rebase</span></span>\n     </div></h1>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Git rebase is a way to rewrite git history. It allows you to remove commits, reorder commits split commits and combine them. Its a very powerful tool. Its okay If all this power is making you nervous. Allow me to put you at ease. During an interactive rebase you can --abort at any time to go back to state from before you started rebasing.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>This blog post gives you a very nice conceptual overview of how rebase works.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span> https://www.atlassian.com/git/tutorials/merging-vs-rebasing</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>H</span></span>\n      <span style=\"font-weight: bold;\"><span>ow to split large commits</span></span>\n     </div></h1>\n    <ol class=\"public-DraftStyleDefault-ol\">\n     <li class=\"public-DraftStyleDefault-orderedListItem public-DraftStyleDefault-reset public-DraftStyleDefault-depth0 public-DraftStyleDefault-listLTR\">\n      <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n       <span><span>Checkout your feature branch.</span></span>\n      </div></li>\n     <li class=\"public-DraftStyleDefault-orderedListItem public-DraftStyleDefault-depth0 public-DraftStyleDefault-listLTR\">\n      <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n       <span><span>Commit all your changes. Make sure </span></span>\n       <span style=\"font-family: monospace; word-wrap: break-word;\"><span>git status</span></span>\n       <span><span> returns \'nothing to commit, working tree clean\'.</span></span>\n      </div></li>\n     <li class=\"public-DraftStyleDefault-orderedListItem public-DraftStyleDefault-depth0 public-DraftStyleDefault-listLTR\">\n      <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n       <span><span>Start the interactive rebase. Type </span></span>\n       <span style=\"font-family: monospace; word-wrap: break-word;\"><span>git rebase -i master</span></span>\n       <span><span>. This will open the editor you have setup for git. That is vim by default. If you prefer more modern editors check this out https://help.github.com/articles/associating-text-editors-with-git/ to set your default editor to atom.</span></span>\n      </div></li>\n     <li class=\"public-DraftStyleDefault-orderedListItem public-DraftStyleDefault-depth0 public-DraftStyleDefault-listLTR\">\n      <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n       <span><span>Mark the commits you want to split for editing like so:</span></span>\n      </div></li>\n    </ol>\n    <div>\n     <pre class=\"language-\"><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// bash //</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>p d0e1c498 Fix bug </span></span></span>\n        <span class=\"token string\"><span><span>\'BS-1234\'</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> e 00c0fd30 Large commit</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> e d0e1c498 Another large commit</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> e 1dc0321a This needs splitting</span></span></span>\n       </div></pre></pre>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Once you are ready to proceed just safe the changes to the file and close the text editor.</span></span>\n     </div>\n    </div>\n    <ol class=\"public-DraftStyleDefault-ol\">\n     <li class=\"public-DraftStyleDefault-orderedListItem public-DraftStyleDefault-reset public-DraftStyleDefault-depth0 public-DraftStyleDefault-listLTR\">\n      <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n       <span><span>The rebase will proceed to the first commit in the list that was marked for editing now you\'re able to split it.</span></span>\n      </div></li>\n     <li class=\"public-DraftStyleDefault-orderedListItem public-DraftStyleDefault-depth0 public-DraftStyleDefault-listLTR\">\n      <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n       <span><span>First un-stage all changes in this commit by running </span></span>\n       <span style=\"font-family: monospace; word-wrap: break-word;\"><span>git reset HEAD~</span></span>\n       <span><span> don\'t worry your changes won\'t get deleted. They will only get uncommitted. Now we can proceed to selecting changes for new commits after the split.</span></span>\n      </div></li>\n     <li class=\"public-DraftStyleDefault-orderedListItem public-DraftStyleDefault-depth0 public-DraftStyleDefault-listLTR\">\n      <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n       <span><span>Add only the changes you want using </span></span>\n       <span style=\"font-family: monospace; word-wrap: break-word;\"><span>git add -p</span></span>\n       <span><span> and commit them the usual way.</span></span>\n      </div></li>\n     <li class=\"public-DraftStyleDefault-orderedListItem public-DraftStyleDefault-depth0 public-DraftStyleDefault-listLTR\">\n      <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n       <span><span>When you are ready to proceed to the next commit marked for editing just run </span></span>\n       <span style=\"font-family: monospace; word-wrap: break-word;\"><span>git rebase --continue </span></span>\n       <span><span>and repeat steps 2 and 3.</span></span>\n      </div></li>\n    </ol>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>How to reorder messy history</span></span>\n     </div></h1>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>As we write code we don\'t always follow a logical ordered path. It likely that as we write code we discover and fix new things that are not always related to the feature we are working on. Also when we start working on a feature we don\'t always know what to do from start to end so naturally we might take some wrong turns along the way.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>If your git history looks something like this:</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <pre class=\"language-\"><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// bash //</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>pick d0e1c498 Work on feature one </span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick 00c0fd30 Small fix here</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick d0e1c498 Work on feature one</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick 1dc0321a Another small unrelated fix</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick 00c0fd30 Work on feature two</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick d0e1c498 Try something</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick d0e1c498 Work on feature one</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick 00c0fd30 Revert what I have tried before</span></span></span>\n       </div></pre></pre>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>There is nothing stopping you reordering the commits to give them a better flow. A history that is easy to follow if much more valuable. All you need to do is reorder the lines. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span> </span></span>\n     </div>\n    </div>\n    <div>\n     <pre class=\"language-\"><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// bash //</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>pick d0e1c498 Work on feature one </span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick d0e1c499 Work on feature one</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick d0e1c410 Work on feature one</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick 00c0fd30 Work on feature two</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick 1dc0321a Another small unrelated fix</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick 00c0fd30 Small fix here</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick d0e1c498 Try something</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick 00c0fd30 Revert what I have tried before</span></span></span>\n       </div></pre></pre>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Sometimes we try solutions that don\'t really work out. Feel free to remove the commits that don\'t add any value since we end up reverting their changes anyway. </span></span>\n     </div>\n    </div>\n    <div>\n     <pre class=\"language-\"><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// bash //</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>pick d0e1c498 Work on feature one </span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick d0e1c499 Work on feature one</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick d0e1c410 Work on feature one</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick 00c0fd30 Work on feature two</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick 1dc0321a Another small unrelated fix</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick 00c0fd30 Small fix here</span></span></span>\n       </div></pre></pre>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span> </span></span>\n     </div>\n    </div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>How to split feature branch into multiple branches</span></span>\n     </div></h1>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span> You might find that you have mixed multiple features onto a single branch. Ideally you would like to save the people who review your pull request the headache of having to review massive amounts of code. The more code you try to merge at once the more difficult it will be for other people to understand your intent and spot any problems. They will be more likely just to accept the request without giving it more than a brief glance. Don\'t be cruel and split your feature branches into manageable chunks. This way when the CI fails you have less code to search through for bugs. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>If you have a git history which looks like this: </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <pre class=\"language-\"><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// bash //</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>pick d0e1c498 Work on feature one </span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick d0e1c499 Work on feature one</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick d0e1c410 Work on feature one</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick 00c0fd30 Work on feature two</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick 1dc0321a Work on feature two</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick 00c0fd30 Work on feature two</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick d0e1c498 Work on feature three</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> pick 00c0fd30 Work on feature three</span></span></span>\n       </div></pre></pre>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>1. Clone the branch using for each feature.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span> </span></span>\n     </div>\n    </div>\n    <div>\n     <pre class=\"language-\"><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// bash //</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>git checkout </span></span></span>\n        <span class=\"token operator\"><span><span>-</span></span></span>\n        <span class=\"token \"><span><span>b feature</span></span></span>\n        <span class=\"token operator\"><span><span>-</span></span></span>\n        <span class=\"token \"><span><span>one</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span style=\"font-family: monospace; word-wrap: break-word;\"><span> git checkout </span></span></span>\n        <span class=\"token operator\"><span style=\"font-family: monospace; word-wrap: break-word;\"><span>-</span></span></span>\n        <span class=\"token \"><span style=\"font-family: monospace; word-wrap: break-word;\"><span>b feature</span></span></span>\n        <span class=\"token operator\"><span style=\"font-family: monospace; word-wrap: break-word;\"><span>-</span></span></span>\n        <span class=\"token \"><span style=\"font-family: monospace; word-wrap: break-word;\"><span>two </span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span style=\"font-family: monospace; word-wrap: break-word;\"><span>git checkout </span></span></span>\n        <span class=\"token operator\"><span style=\"font-family: monospace; word-wrap: break-word;\"><span>-</span></span></span>\n        <span class=\"token \"><span style=\"font-family: monospace; word-wrap: break-word;\"><span>b feature</span></span></span>\n        <span class=\"token operator\"><span style=\"font-family: monospace; word-wrap: break-word;\"><span>-</span></span></span>\n        <span class=\"token \"><span style=\"font-family: monospace; word-wrap: break-word;\"><span>three</span></span></span>\n       </div></pre></pre>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span> 2. Use </span></span>\n      <span style=\"font-family: monospace; word-wrap: break-word;\"><span>git rebase -i</span></span>\n      <span><span> to remove the commits that don\'t apply to given branch. For example branch feature one should look like this:</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <pre class=\"language-\"><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// bash //</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span style=\"font-family: monospace; word-wrap: break-word;\"><span>pick d0e1c498 Work on feature one </span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span style=\"font-family: monospace; word-wrap: break-word;\"><span> pick d0e1c499 Work on feature one </span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span style=\"font-family: monospace; word-wrap: break-word;\"><span>pick d0e1c410 Work on feature one</span></span></span>\n       </div></pre></pre>\n    </div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>If you fuck up</span></span>\n     </div></h1>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>There are times when you really fuck up with git. Sometimes you override something that should not be overridden or you remove a git commit that should not be removed. Don\'t lose hope! Git has your back http://effectif.com/git/recovering-lost-git-commits. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <img class=\"media\">\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Remember the golden rule</span></span>\n     </div></h1>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Remember the golden rule: </span></span>\n      <span style=\"font-weight: bold;\"><span>Don\'t rebase public branches!</span></span>\n      <span><span> Now that you know about rebase remember that: </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <img class=\"media\">\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n   </div>\n  </div>\n </body>\n</html>','{\"entityMap\":{\"0\":{\"type\":\"image\",\"mutability\":\"IMMUTABLE\",\"data\":{\"src\":\"/blog-content/80dc6616-5529-4901-aa66-7e861e469c8d.gif\"}},\"1\":{\"type\":\"image\",\"mutability\":\"IMMUTABLE\",\"data\":{\"src\":\"/blog-content/d2d67784-fa6d-4469-864f-69286e009bfc.gif\"}},\"2\":{\"type\":\"LINK\",\"mutability\":\"MUTABLE\",\"data\":{\"href\":\"https://chris.beams.io/posts/git-commit/\",\"rel\":\"nofollow\",\"url\":\"https://chris.beams.io/posts/git-commit/\"}},\"3\":{\"type\":\"LINK\",\"mutability\":\"MUTABLE\",\"data\":{\"href\":\"https://www.atlassian.com/git/tutorials/merging-vs-rebasing\",\"rel\":\"nofollow\",\"url\":\"https://www.atlassian.com/git/tutorials/merging-vs-rebasing\"}},\"4\":{\"type\":\"LINK\",\"mutability\":\"MUTABLE\",\"data\":{\"href\":\"https://help.github.com/articles/associating-text-editors-with-git/\",\"url\":\"https://help.github.com/articles/associating-text-editors-with-git/\"}},\"5\":{\"type\":\"LINK\",\"mutability\":\"MUTABLE\",\"data\":{\"href\":\"http://effectif.com/git/recovering-lost-git-commits\",\"rel\":\"nofollow\",\"url\":\"http://effectif.com/git/recovering-lost-git-commits\"}},\"6\":{\"type\":\"image\",\"mutability\":\"IMMUTABLE\",\"data\":{\"src\":\"/blog-content/b957d9ed-cf09-428c-acc2-c98f07348500.gif\"}},\"7\":{\"type\":\"image\",\"mutability\":\"IMMUTABLE\",\"data\":{\"src\":\"/blog-content/5957cc21-0f66-4819-985a-c99a14ed9905.gif\"}}},\"blocks\":[{\"key\":\"7opf0\",\"text\":\"Git rebase is like fire\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"d21kc\",\"text\":\"Git rebase is like fire. In inexperienced hands in can do a lot of harm, but if its handled with care it will make your life much better. Let it help you make your projects easier to maintain.  \",\"type\":\"summary\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":193,\"length\":1,\"key\":0}],\"data\":{}},{\"key\":\"e8i51\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"2c759\",\"text\":\" \",\"type\":\"atomic\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":1,\"key\":1}],\"data\":{}},{\"key\":\"3muv\",\"text\":\"Scary ghost stories\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"16t6s\",\"text\":\"When I first started using git I was told never to use git rebase because it is dangerous. After gaining experience using git someone else told me to use it. At first I tough it was blasphemy even to mention this command. However after giving it a try I could no longer live without it. It lets me keep my commit history clean and therefore much more useful. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":55,\"length\":10,\"style\":\"CODE\"},{\"offset\":80,\"length\":9,\"style\":\"BOLD\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"2m3d2\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"fa9o4\",\"text\":\"The danger that everyone talks about is the fact that this command rewrites history and generates new git commit tags for rebased commits. This means that if you are working on the same branch as someone else you should not rebase it because it will make it really hard to resolve git conflicts. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":4,\"length\":6,\"style\":\"BOLD\"},{\"offset\":209,\"length\":21,\"style\":\"BOLD\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"c5iab\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"58lv5\",\"text\":\"Imagine you have the same commit duplicated locally on your machine and your coworkers machine. If you rebase and try to merge your changes with your co-worker\'s, git has no way of identifying that your version of commit is the same as your friend\'s version. Its id has been changed. Keep this in mind when you use rebase. You should use it on personal feature branches, but if you need to do this on a shared branch make sure that everyone is aware that you plan to do this and that everyone\'s changes are securely merged before proceeding. This means that rebasing master is almost never a good idea. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"6qj7e\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"6ucbq\",\"text\":\"A good commit\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"69bme\",\"text\":\"A good commit history is invaluable for maintainability of a project. It will aid you when you come back to a project that you haven\'t worked on in a long time or a project that you have never seen before. Having a good commit history will allow you to understand the context in which the code has been written. That in turn will help you to understand the problems that developers have been faced with in the past and justify the design decisions they made as well as the assumptions they had.\\nRead this: https://chris.beams.io/posts/git-commit/ for an amazing summary of how to write a good commit message.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":506,\"length\":40,\"key\":2}],\"data\":{}},{\"key\":\"7es68\",\"text\":\"\\nThink about the times where you had to change the code written by someone who has already left the company. You could not ask them why did they do something the way they have done it or what were the requirements they were working towards. Now imagine that you can summon their git ghost that will tell you all the information you want to know and let you replay their thought process commit by commit. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"djtkr\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"b1gck\",\"text\":\"Dirty commit history is technical debt\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"eoo1h\",\"text\":\"Unfortunately as we write the code we don\'t always have the time to spend to write good commit messages. When we are in debugging and tweaking mode we don\'t want to focus on elaborate git commits. Don\'t worry. You can have the cake and eat it!\\nIf you remember to rebase your feature branches before merging them you will have a great occasion to clean up the mess you have left before and arrange it into a clean and easy to follow list of good commits. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"tlhk\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"54jo8\",\"text\":\"What is git rebase\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"dsl5v\",\"text\":\"Git rebase is a way to rewrite git history. It allows you to remove commits, reorder commits split commits and combine them. Its a very powerful tool. Its okay If all this power is making you nervous. Allow me to put you at ease. During an interactive rebase you can --abort at any time to go back to state from before you started rebasing.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"datuc\",\"text\":\"This blog post gives you a very nice conceptual overview of how rebase works.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"6ai4v\",\"text\":\"\\nhttps://www.atlassian.com/git/tutorials/merging-vs-rebasing\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":1,\"length\":59,\"key\":3}],\"data\":{}},{\"key\":\"ferfd\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"1equ0\",\"text\":\"How to split large commits\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":1,\"length\":25,\"style\":\"BOLD\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"8he2n\",\"text\":\"Checkout your feature branch.\",\"type\":\"ordered-list-item\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"4f7gs\",\"text\":\"Commit all your changes. Make sure git status returns \'nothing to commit, working tree clean\'.\",\"type\":\"ordered-list-item\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":35,\"length\":10,\"style\":\"CODE\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"7iuh5\",\"text\":\"Start the interactive rebase. Type git rebase -i master. This will open the editor you have setup for git. That is vim by default. If you prefer more modern editors check this out https://help.github.com/articles/associating-text-editors-with-git/ to set your default editor to atom.\",\"type\":\"ordered-list-item\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":35,\"length\":20,\"style\":\"CODE\"}],\"entityRanges\":[{\"offset\":180,\"length\":67,\"key\":4}],\"data\":{}},{\"key\":\"56kkl\",\"text\":\"Mark the commits you want to split for editing like so:\",\"type\":\"ordered-list-item\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"1q8aq\",\"text\":\"// bash //\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"1hvd9\",\"text\":\"p d0e1c498 Fix bug \'BS-1234\'\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"btkv1\",\"text\":\"\\ne 00c0fd30 Large commit\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"cou75\",\"text\":\"\\ne d0e1c498 Another large commit\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"cpdko\",\"text\":\"\\ne 1dc0321a This needs splitting\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"6rogp\",\"text\":\"Once you are ready to proceed just safe the changes to the file and close the text editor.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"7l3mo\",\"text\":\"The rebase will proceed to the first commit in the list that was marked for editing now you\'re able to split it.\",\"type\":\"ordered-list-item\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"16p4r\",\"text\":\"First un-stage all changes in this commit by running git reset HEAD~ don\'t worry your changes won\'t get deleted. They will only get uncommitted. Now we can proceed to selecting changes for new commits after the split.\",\"type\":\"ordered-list-item\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":53,\"length\":15,\"style\":\"CODE\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"18u0e\",\"text\":\"Add only the changes you want using git add -p and commit them the usual way.\",\"type\":\"ordered-list-item\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":36,\"length\":10,\"style\":\"CODE\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"dc6aj\",\"text\":\"When you are ready to proceed to the next commit marked for editing just run git rebase --continue and repeat steps 2 and 3.\",\"type\":\"ordered-list-item\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":77,\"length\":22,\"style\":\"CODE\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"1ojgo\",\"text\":\"How to reorder messy history\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"3tc4u\",\"text\":\"As we write code we don\'t always follow a logical ordered path. It likely that as we write code we discover and fix new things that are not always related to the feature we are working on. Also when we start working on a feature we don\'t always know what to do from start to end so naturally we might take some wrong turns along the way.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"do2cp\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"etd3f\",\"text\":\"If your git history looks something like this:\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"brlq0\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"aivj2\",\"text\":\"// bash //\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"4lcc4\",\"text\":\"pick d0e1c498 Work on feature one \",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"5sfnh\",\"text\":\"\\npick 00c0fd30 Small fix here\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"24iov\",\"text\":\"\\npick d0e1c498 Work on feature one\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"fmqq4\",\"text\":\"\\npick 1dc0321a Another small unrelated fix\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"b9278\",\"text\":\"\\npick 00c0fd30 Work on feature two\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"8iqg3\",\"text\":\"\\npick d0e1c498 Try something\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"77bii\",\"text\":\"\\npick d0e1c498 Work on feature one\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"7u7fd\",\"text\":\"\\npick 00c0fd30 Revert what I have tried before\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"mdpn\",\"text\":\"There is nothing stopping you reordering the commits to give them a better flow. A history that is easy to follow if much more valuable. All you need to do is reorder the lines. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"emgol\",\"text\":\" \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"dme23\",\"text\":\"// bash //\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"f6mvd\",\"text\":\"pick d0e1c498 Work on feature one \",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"5ljf6\",\"text\":\"\\npick d0e1c499 Work on feature one\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"rr24\",\"text\":\"\\npick d0e1c410 Work on feature one\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"c7p7n\",\"text\":\"\\npick 00c0fd30 Work on feature two\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"fav5s\",\"text\":\"\\npick 1dc0321a Another small unrelated fix\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"8o2nd\",\"text\":\"\\npick 00c0fd30 Small fix here\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"dls93\",\"text\":\"\\npick d0e1c498 Try something\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"dnvuh\",\"text\":\"\\npick 00c0fd30 Revert what I have tried before\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"68n97\",\"text\":\"Sometimes we try solutions that don\'t really work out. Feel free to remove the commits that don\'t add any value since we end up reverting their changes anyway. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"b6vga\",\"text\":\"// bash //\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"5c4ud\",\"text\":\"pick d0e1c498 Work on feature one \",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"e0qtk\",\"text\":\"\\npick d0e1c499 Work on feature one\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ff83r\",\"text\":\"\\npick d0e1c410 Work on feature one\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"5q40r\",\"text\":\"\\npick 00c0fd30 Work on feature two\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"bv8k0\",\"text\":\"\\npick 1dc0321a Another small unrelated fix\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"b89q0\",\"text\":\"\\npick 00c0fd30 Small fix here\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"45dk8\",\"text\":\" \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"b5k0h\",\"text\":\"How to split feature branch into multiple branches\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"82v4m\",\"text\":\" You might find that you have mixed multiple features onto a single branch. Ideally you would like to save the people who review your pull request the headache of having to review massive amounts of code. The more code you try to merge at once the more difficult it will be for other people to understand your intent and spot any problems. They will be more likely just to accept the request without giving it more than a brief glance. Don\'t be cruel and split your feature branches into manageable chunks. This way when the CI fails you have less code to search through for bugs. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"bd9dh\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"1p4hb\",\"text\":\"If you have a git history which looks like this: \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"1o6he\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"13qj7\",\"text\":\"// bash //\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"3aed4\",\"text\":\"pick d0e1c498 Work on feature one \",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"53tip\",\"text\":\"\\npick d0e1c499 Work on feature one\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"923bq\",\"text\":\"\\npick d0e1c410 Work on feature one\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"3bcop\",\"text\":\"\\npick 00c0fd30 Work on feature two\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"28rm9\",\"text\":\"\\npick 1dc0321a Work on feature two\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"65rdr\",\"text\":\"\\npick 00c0fd30 Work on feature two\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"4ifks\",\"text\":\"\\npick d0e1c498 Work on feature three\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"7g2mr\",\"text\":\"\\npick 00c0fd30 Work on feature three\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"b6tdg\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"3a540\",\"text\":\"1. Clone the branch using for each feature.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"asitr\",\"text\":\" \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"dph8t\",\"text\":\"// bash //\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"1ldvf\",\"text\":\"git checkout -b feature-one\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"hjg2\",\"text\":\"\\ngit checkout -b feature-two\\n\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":0,\"length\":29,\"style\":\"CODE\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"vshh\",\"text\":\"git checkout -b feature-three\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":0,\"length\":29,\"style\":\"CODE\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"6vie3\",\"text\":\" 2. Use git rebase -i to remove the commits that don\'t apply to given branch. For example branch feature one should look like this:\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":8,\"length\":13,\"style\":\"CODE\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"enknv\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ampqv\",\"text\":\"// bash //\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"3efaj\",\"text\":\"pick d0e1c498 Work on feature one \",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":0,\"length\":34,\"style\":\"CODE\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"eqj3f\",\"text\":\"\\npick d0e1c499 Work on feature one\\n\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":0,\"length\":35,\"style\":\"CODE\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"60i2i\",\"text\":\"pick d0e1c410 Work on feature one\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":0,\"length\":33,\"style\":\"CODE\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"462j4\",\"text\":\"If you fuck up\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"795ci\",\"text\":\"There are times when you really fuck up with git. Sometimes you override something that should not be overridden or you remove a git commit that should not be removed. Don\'t lose hope! Git has your back http://effectif.com/git/recovering-lost-git-commits. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":203,\"length\":51,\"key\":5}],\"data\":{}},{\"key\":\"1ucq\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ekt6g\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"37ukl\",\"text\":\" \",\"type\":\"atomic\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":1,\"key\":6}],\"data\":{}},{\"key\":\"3vsc4\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"f5d8f\",\"text\":\"Remember the golden rule\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"8vq5c\",\"text\":\"Remember the golden rule: Don\'t rebase public branches! Now that you know about rebase remember that: \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":26,\"length\":29,\"style\":\"BOLD\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"66ffc\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"38njf\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"61lcj\",\"text\":\" \",\"type\":\"atomic\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[{\"offset\":0,\"length\":1,\"key\":7}],\"data\":{}},{\"key\":\"7tg8e\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}]}','2018-03-10 00:29:47','git-rebase-is-like-fire','<div class=\"summary\">\n <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n  <span><span>Git rebase is like fire. In inexperienced hands in can do a lot of harm, but if its handled with care it will make your life much better. Let it help you make your projects easier to maintain. </span></span>\n </div>\n</div><br>','Git rebase is like fire','2018-03-10 00:31:05'),(7,'2018-03-22 15:18:10','<html>\n <head></head>\n <body>\n  <div class=\"notranslate public-DraftEditor-content\" style=\"outline: none; user-select: text; white-space: pre-wrap; word-wrap: break-word;\">\n   <div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Private variables in JavaScript aka What are Closures!?</span></span>\n     </div></h1>\n    <div class=\"summary\">\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>There is a common misconception within the Java community that having private variables in JS is impossible. This isn\'t true. It simply requires a little more work than writing </span></span>\n      <span style=\"font-family: monospace; word-wrap: break-word;\"><span>private</span></span>\n      <span><span> in front of the variable name. </span></span>\n     </div>\n    </div>\n    <div class=\"summary\">\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <h2>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Scope in JavaScript</span></span>\n     </div></h2>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Unlike Java, in JavaScript variables aren\'t block scoped. We are used to writing code like this: </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <pre class=\"language-\"><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// java //</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>public void </span></span></span>\n        <span class=\"token function\"><span><span>doAThing</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>final boolean condition</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token keyword\"><span><span>if</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>condition</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> final String confirmation </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token string\"><span><span>\"I did the thing!\"</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> System</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>out</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>println</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>confirmation</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> final String confirmation </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token string\"><span><span>\"This is a different scope!\"</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> System</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>out</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>println</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>confirmation</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre></pre>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Furthermore, anything defined in the parent scope will be available in all its sub scopes like so: </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <pre class=\"language-\"><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// java //</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>public void </span></span></span>\n        <span class=\"token function\"><span><span>doAnotherThing</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>final boolean condition</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> final String confirmationMessage </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token string\"><span><span>\"I %s the thing!\"</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token keyword\"><span><span>if</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>condition</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> System</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>out</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>println</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>String</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>format</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>confirmationMessage</span></span></span>\n        <span class=\"token punctuation\"><span><span>,</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token string\"><span><span>\"did\"</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token keyword\"><span><span>else</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> System</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token \"><span><span>out</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>println</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>String</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>format</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>confirmationMessage</span></span></span>\n        <span class=\"token punctuation\"><span><span>,</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token string\"><span><span>\"did not do\"</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre></pre>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>In JavaScript variables are </span></span>\n      <span style=\"font-weight: bold;\"><span>function scoped</span></span>\n      <span><span>! This means that any variable we declare in a function shares its scope with the rest of the variables in the same function and all functions declared within this scope. </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <pre class=\"language-\"><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// javascript //</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token keyword\"><span><span>function</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token function\"><span><span>doAThing</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>condition</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token keyword\"><span><span>if</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>condition</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> var confirmation </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token string\"><span><span>\"I did the thing!\"</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> console</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>log</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>confirmation</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> confirmation </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token string\"><span><span>\"This is the same scope and the same variable!\"</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> console</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>log</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>confirmation</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token keyword\"><span><span>function</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token function\"><span><span>doManyThings</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>n</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token keyword\"><span><span>for</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>i </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token number\"><span><span>0</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n        <span class=\"token \"><span><span> i </span></span></span>\n        <span class=\"token operator\"><span><span>&lt;</span></span></span>\n        <span class=\"token \"><span><span> n</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n        <span class=\"token \"><span><span> i</span></span></span>\n        <span class=\"token operator\"><span><span>++</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> console</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>log</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>i </span></span></span>\n        <span class=\"token operator\"><span><span>+</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token string\"><span><span>\" exists inside the loop\"</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> console</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>log</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>i </span></span></span>\n        <span class=\"token operator\"><span><span>+</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token string\"><span><span>\" still exists outside the loop\"</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> var printI </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token keyword\"><span><span>function</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> console</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>log</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>i</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token function\"><span><span>printI</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token comment\"><span><span>// Prints the variable since the function inherits scope from its parent.</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre></pre>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>You can use this feature of JavaScript to control the scope of your variables in a way which limits the access to the variable from the \"outside\".</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <pre class=\"language-\"><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// javascript //</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token keyword\"><span><span>function</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token function\"><span><span>constructACounterWithPrivateVariable</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> var privateCounter </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token number\"><span><span>0</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token keyword\"><span><span>function</span></span></span>\n        <span class=\"token \"><span><span> add </span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> privateCounter</span></span></span>\n        <span class=\"token operator\"><span><span>++</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token keyword\"><span><span>return</span></span></span>\n        <span class=\"token \"><span><span> privateCounter</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token keyword\"><span><span>return</span></span></span>\n        <span class=\"token \"><span><span> add</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>console</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>log</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>privateCounter</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token comment\"><span><span>//undefined. We don\'t have access to it from the outside</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>var incrementCounter </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token function\"><span><span>constructACounterWithPrivateVariable</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token comment\"><span><span>// incrementCounter now holds a function which has access to privateCounter variable</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>console</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>log</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token function\"><span><span>incrementCounter</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token comment\"><span><span>// 1</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>console</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>log</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token function\"><span><span>incrementCounter</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token comment\"><span><span>// 2</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>console</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>log</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token function\"><span><span>incrementCounter</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token comment\"><span><span>// 3</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token keyword\"><span><span>function</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token function\"><span><span>objectWithGetterButNoSetter</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>value</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token keyword\"><span><span>return</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> getValue</span></span></span>\n        <span class=\"token punctuation\"><span><span>:</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token keyword\"><span><span>function</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>{</span></span></span>\n        <span class=\"token keyword\"><span><span>return</span></span></span>\n        <span class=\"token \"><span><span> value</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token punctuation\"><span><span>}</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>var myObject </span></span></span>\n        <span class=\"token operator\"><span><span>=</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token function\"><span><span>objectWithGetterButNoSetter</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token string\"><span><span>\"My immutable string\"</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span><br></span>\n       </div></pre><pre>\n       <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n        <span class=\"token \"><span><span>console</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>log</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token \"><span><span>myObject</span></span></span>\n        <span class=\"token punctuation\"><span><span>.</span></span></span>\n        <span class=\"token function\"><span><span>getValue</span></span></span>\n        <span class=\"token punctuation\"><span><span>(</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>)</span></span></span>\n        <span class=\"token punctuation\"><span><span>;</span></span></span>\n        <span class=\"token \"><span><span> </span></span></span>\n        <span class=\"token comment\"><span><span>// My immutable string</span></span></span>\n       </div></pre></pre>\n    </div>\n   </div>\n  </div>\n </body>\n</html>','{\"entityMap\":{},\"blocks\":[{\"key\":\"4g2ig\",\"text\":\"Private variables in JavaScript aka What are Closures!?\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"a28h6\",\"text\":\"There is a common misconception within the Java community that having private variables in JS is impossible. This isn\'t true. It simply requires a little more work than writing private in front of the variable name. \",\"type\":\"summary\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":177,\"length\":7,\"style\":\"CODE\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"74k1f\",\"text\":\"\",\"type\":\"summary\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"2ilng\",\"text\":\"Scope in JavaScript\",\"type\":\"header-two\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"161a5\",\"text\":\"Unlike Java, in JavaScript variables aren\'t block scoped. We are used to writing code like this: \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"a4nfg\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"cc9jf\",\"text\":\"// java //\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"c33lv\",\"text\":\"public void doAThing(final boolean condition) {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"7iqno\",\"text\":\"   if (condition) {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"eorq\",\"text\":\"      final String confirmation = \\\"I did the thing!\\\";\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"4j3h7\",\"text\":\"      System.out.println(confirmation);\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"frc61\",\"text\":\"   }\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"brgf5\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"6gbp8\",\"text\":\"   final String confirmation = \\\"This is a different scope!\\\";\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"61fff\",\"text\":\"   System.out.println(confirmation);\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"2f5nh\",\"text\":\"}\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"75esb\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"c3dvg\",\"text\":\"Furthermore, anything defined in the parent scope will be available  in all its sub scopes like so: \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ag1cg\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"8vi9m\",\"text\":\"// java //\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"6cjan\",\"text\":\"public void doAnotherThing(final boolean condition) {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"50od4\",\"text\":\"   final String confirmationMessage = \\\"I %s the thing!\\\";\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"dt7en\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"carvh\",\"text\":\"   if (condition) {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"9eqlr\",\"text\":\"      System.out.println(String.format(confirmationMessage, \\\"did\\\"))\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"bab1c\",\"text\":\"   } else { \",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"2b6vl\",\"text\":\"      System.out.println(String.format(confirmationMessage, \\\"did not do\\\"))\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"284vb\",\"text\":\"   }\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"2mrfk\",\"text\":\"}\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"72ob8\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"crqn0\",\"text\":\"In JavaScript variables are function scoped! This means that any variable we declare in a function shares its scope with the rest of the variables in the same function and all functions declared within this scope. \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":28,\"length\":15,\"style\":\"BOLD\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"f8i1h\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"au0vq\",\"text\":\"// javascript //\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"81i7t\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"627m6\",\"text\":\"function doAThing(condition) {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"fmoir\",\"text\":\"   if (condition) {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"e0l0f\",\"text\":\"      var confirmation = \\\"I did the thing!\\\";\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"etaf\",\"text\":\"      console.log(confirmation)\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"801g7\",\"text\":\"   }\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"fh1kc\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"3hc1\",\"text\":\"   confirmation = \\\"This is the same scope and the same variable!\\\";\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"69t7p\",\"text\":\"   console.log(confirmation)\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"81uq8\",\"text\":\"}\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"atbb2\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"6l272\",\"text\":\"function doManyThings(n) {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ccdg4\",\"text\":\"   for (i = 0; i < n; i++) {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"9lk1e\",\"text\":\"      console.log(i + \\\" exists inside the loop\\\");\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"8ormh\",\"text\":\"   }\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"7ndk5\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"amp5q\",\"text\":\"   console.log(i + \\\" still exists outside the loop\\\");\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"6j6kj\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"e0h1a\",\"text\":\"   var printI = function() {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"dhfk4\",\"text\":\"      console.log(i);\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"6jc85\",\"text\":\"   }\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"3p724\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"flslu\",\"text\":\"   printI(); // Prints the variable since the function inherits scope from its parent.\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"anae0\",\"text\":\"}\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"5mu5o\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"1lgm1\",\"text\":\"You can use this feature of JavaScript to control the scope of your variables in a way which limits the access to the variable from the \\\"outside\\\".\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"8th74\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"5avm0\",\"text\":\"// javascript //\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"aribj\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"a2b8e\",\"text\":\"function constructACounterWithPrivateVariable() {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"50c2c\",\"text\":\"   var privateCounter = 0;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"4u06l\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"70cod\",\"text\":\"   function add () { \",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"b3mun\",\"text\":\"      privateCounter++;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"cvg09\",\"text\":\"      return privateCounter;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"3gjft\",\"text\":\"   }\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"f7mpq\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"1eblg\",\"text\":\"   return add;\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"al1lo\",\"text\":\"}\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"2ii5k\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"2hjb3\",\"text\":\"console.log(privateCounter); //undefined. We don\'t have access to it from the outside\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"5i8km\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"9cqvk\",\"text\":\"var incrementCounter = constructACounterWithPrivateVariable(); \",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"fics6\",\"text\":\"// incrementCounter now holds a function which has access to privateCounter variable\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"8nabm\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ss08\",\"text\":\"console.log(incrementCounter()); // 1\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"bhqgt\",\"text\":\"console.log(incrementCounter()); // 2\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"fhphf\",\"text\":\"console.log(incrementCounter()); // 3\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"3dps\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"amva6\",\"text\":\"function objectWithGetterButNoSetter(value) {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"2r9bc\",\"text\":\"   return {\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"e79hm\",\"text\":\"      getValue: function () {return value;}\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"e13hj\",\"text\":\"   };\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"4pmm4\",\"text\":\"}\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"67hoe\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"e25ga\",\"text\":\"var myObject = objectWithGetterButNoSetter(\\\"My immutable string\\\");\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ebvin\",\"text\":\"\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"alr99\",\"text\":\"console.log(myObject.getValue()); // My immutable string\",\"type\":\"code-block\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}]}','2018-03-22 22:54:17','private-variables-in-javascript-aka-what-are-closures','<div class=\"summary\">\n <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n  <span><span>There is a common misconception within the Java community that having private variables in JS is impossible. This isn\'t true. It simply requires a little more work than writing </span></span>\n  <span style=\"font-family: monospace; word-wrap: break-word;\"><span>private</span></span>\n  <span><span> in front of the variable name. </span></span>\n </div>\n</div><br><div class=\"summary\">\n <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n  <span><br></span>\n </div>\n</div><br>','Private variables in JavaScript aka What are Closures!?','2018-03-22 22:55:39'),(8,'2018-04-26 09:34:04','<html>\n <head></head>\n <body>\n  <div class=\"notranslate public-DraftEditor-content\" style=\"outline: none; user-select: text; white-space: pre-wrap; word-wrap: break-word;\">\n   <div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>My CV Online</span></span>\n     </div></h1>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span style=\"font-weight: bold;\"><span>Daniel Baranowski</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span> </span></span>\n     </div>\n    </div>\n    <h2>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span style=\"\"><span>Address</span></span>\n     </div></h2>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>148 Clarence House</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>LS10 1LH Leeds </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <h2>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span style=\"\"><span>Contact</span></span>\n     </div></h2>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>07538587084</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>d.baranowski@devtales.net</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <h2>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>RELEVANT TECHNICAL SKILLS</span></span>\n     </div></h2>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· React &amp; Redux</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· Angular &amp; Ngrx</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· Java 8 &amp; Spring Boot </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· Agile Scrum using Atlassian JIRA</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· Relational Databases with SQL</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· Git &amp; Jenkins CI</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· Linux operating system &amp; Docker</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><br></span>\n     </div>\n    </div>\n    <h2>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>WORK EXPERIENCE</span></span>\n     </div></h2>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span style=\"font-weight: bold;\"><span>Sep 2017 – Current Software Developer – BJSS in Leeds</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· Working as a full stack developer created a dynamic reporting software using Angular and Java to replace old Visual Basic solutions.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· Improved negotiation and conflict resolution skills when convincing developers of legacy applications to use version control and testing frameworks.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span style=\"font-weight: bold;\"><span>Aug 2015 – Sep 2016</span></span>\n      <span><span> </span></span>\n      <span style=\"font-weight: bold;\"><span>Software Developer – BJSS in Leeds</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· Contributed to creation of a highly interactive sports news website using React.js and Node.js Express.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· Developed REST API using Java Dropwizard to act as an interface for a legacy system in a TV company.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· Worked on a web application for airlines company, written in C# with use of ASP.NET MVC framework.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· Improved good team working skills through work with talented people on many interesting projects.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>EDUCATION</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>2013 - 2017 - Computer Science (Software Engineering) BSc Honours 1st class at Newcastle University </span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· Improved my organisation and leadership skills by being a team leader for a project.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· Learned HTML and CSS by creating a website of tutorials.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· Gained experience in using GIT by organising my work on services like GitHub and BitBucket.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· Improved my communication and confidence by creating and performing a presentation about Git and GitHub for my friends.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>2011 - 2013 - BTEC Extended Diploma Level 3 in IT at Huddersfield New College</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· BTEC Extended Diploma Level 3 in IT - Distinction *, Distinction *, Distinction * - 420 UCAS Points.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· Contributed to creation of friendly work atmosphere by teaching students basics of programming.</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>ACHIEVEMENTS</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· 2017 - Won the price for the best use of Twilio API at StudentHack V in Mancheser</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· 2017 – Contributed to the community as volunteer programming teacher as school</span></span>\n     </div>\n    </div>\n    <div>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>· 2015 – Volunteered at a hackathon in Newcastle upon Tyne </span></span>\n     </div>\n    </div>\n   </div>\n  </div>\n </body>\n</html>','{\"entityMap\":{},\"blocks\":[{\"key\":\"5lat2\",\"text\":\"My CV Online\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"1f1h0\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ie4c\",\"text\":\"Daniel Baranowski\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":0,\"length\":17,\"style\":\"BOLD\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"btqi4\",\"text\":\"  \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"c8ae8\",\"text\":\"Address\",\"type\":\"header-two\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ecavs\",\"text\":\"148 Clarence House\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"efgeo\",\"text\":\"LS10   1LH Leeds \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"8agj7\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"4pgec\",\"text\":\"Contact\",\"type\":\"header-two\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"9rrik\",\"text\":\"07538587084\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"7rkjc\",\"text\":\"d.baranowski@devtales.net\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"end45\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"c8ahm\",\"text\":\"RELEVANT TECHNICAL SKILLS\",\"type\":\"header-two\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"b0ou9\",\"text\":\"· React & Redux\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ecr6r\",\"text\":\"· Angular & Ngrx\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"frgog\",\"text\":\"· Java 8 & Spring Boot \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"sk5i\",\"text\":\"· Agile Scrum using Atlassian JIRA\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"6009p\",\"text\":\"· Relational Databases with SQL\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"6ttem\",\"text\":\"· Git & Jenkins CI\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"7cfqf\",\"text\":\"· Linux operating system & Docker\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"43o9l\",\"text\":\"\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"bvlbi\",\"text\":\"WORK EXPERIENCE\",\"type\":\"header-two\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"2vq11\",\"text\":\"Sep 2017 – Current Software Developer – BJSS in Leeds\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":0,\"length\":53,\"style\":\"BOLD\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"6iinb\",\"text\":\"· Working as a full stack developer created a dynamic reporting software using Angular and Java to replace old Visual Basic solutions.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"f2rtd\",\"text\":\"· Improved negotiation and conflict resolution skills when convincing developers of legacy applications to use version control and testing frameworks.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"10s30\",\"text\":\"Aug 2015 – Sep 2016 Software Developer – BJSS in Leeds\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[{\"offset\":0,\"length\":19,\"style\":\"BOLD\"},{\"offset\":20,\"length\":34,\"style\":\"BOLD\"}],\"entityRanges\":[],\"data\":{}},{\"key\":\"8m0kq\",\"text\":\"· Contributed to creation of a highly interactive sports news website using React.js and Node.js Express.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"2rce8\",\"text\":\"· Developed REST API using Java Dropwizard to act as an interface for a legacy system in a TV company.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"ede2b\",\"text\":\"· Worked on a web application for airlines company, written in C# with use of ASP.NET MVC framework.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"dbrc4\",\"text\":\"· Improved good team working skills through work with talented people on many interesting projects.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"bbl\",\"text\":\"EDUCATION\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"2cv7m\",\"text\":\"2013 - 2017 - Computer Science (Software Engineering) BSc Honours 1st class at Newcastle University \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"10m3u\",\"text\":\"· Improved my organisation and leadership skills by being a team leader for a project.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"52ngi\",\"text\":\"· Learned HTML and CSS by creating a website of tutorials.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"c82uo\",\"text\":\"· Gained experience in using GIT by organising my work on services like GitHub and BitBucket.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"5auu6\",\"text\":\"· Improved my communication and confidence by creating and performing a presentation about Git and GitHub for my friends.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"3gjlr\",\"text\":\"2011 - 2013 - BTEC Extended Diploma Level 3 in IT at Huddersfield New College\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"14cjj\",\"text\":\"· BTEC Extended Diploma Level 3 in IT - Distinction *, Distinction *, Distinction * - 420 UCAS Points.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"aa392\",\"text\":\"· Contributed to creation of friendly work atmosphere by teaching students basics of programming.\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"crmk1\",\"text\":\"ACHIEVEMENTS\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"jfc3\",\"text\":\"· 2017 - Won the price for the best use of Twilio API at StudentHack V in Mancheser\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"32qrn\",\"text\":\"· 2017 – Contributed to the community as volunteer programming teacher as school\",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}},{\"key\":\"e4v2b\",\"text\":\"· 2015 – Volunteered at a hackathon in Newcastle upon Tyne \",\"type\":\"unstyled\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}]}',NULL,'my-cv-online','','My CV Online','2018-04-26 09:51:15'),(9,'2018-04-26 11:04:57','<html>\n <head></head>\n <body>\n  <div class=\"notranslate public-DraftEditor-content\" style=\"outline: none; user-select: text; white-space: pre-wrap; word-wrap: break-word;\">\n   <div>\n    <h1>\n     <div class=\"public-DraftStyleDefault-block public-DraftStyleDefault-ltr\">\n      <span><span>Dangerously shiny things</span></span>\n     </div></h1>\n   </div>\n  </div>\n </body>\n</html>','{\"entityMap\":{},\"blocks\":[{\"key\":\"9ctji\",\"text\":\"Dangerously shiny things\",\"type\":\"header-one\",\"depth\":0,\"inlineStyleRanges\":[],\"entityRanges\":[],\"data\":{}}]}',NULL,'dangerously-shiny-things','','Dangerously shiny things',NULL);
/*!40000 ALTER TABLE `article` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-11-27 14:04:16
